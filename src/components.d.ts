/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface RrkMealplanApp {
        "apiBase": string;
        "basePath": string;
        "counter": number;
    }
    interface RrkMealplanMealEditor {
        "ambulanceId": string;
        "apiBase": string;
        "entryId": string;
    }
    interface RrkMealplanMealList {
        "apiBase": string;
    }
}
export interface RrkMealplanMealEditorCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRrkMealplanMealEditorElement;
}
export interface RrkMealplanMealListCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRrkMealplanMealListElement;
}
declare global {
    interface HTMLRrkMealplanAppElement extends Components.RrkMealplanApp, HTMLStencilElement {
    }
    var HTMLRrkMealplanAppElement: {
        prototype: HTMLRrkMealplanAppElement;
        new (): HTMLRrkMealplanAppElement;
    };
    interface HTMLRrkMealplanMealEditorElementEventMap {
        "editor-closed": string;
    }
    interface HTMLRrkMealplanMealEditorElement extends Components.RrkMealplanMealEditor, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRrkMealplanMealEditorElementEventMap>(type: K, listener: (this: HTMLRrkMealplanMealEditorElement, ev: RrkMealplanMealEditorCustomEvent<HTMLRrkMealplanMealEditorElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRrkMealplanMealEditorElementEventMap>(type: K, listener: (this: HTMLRrkMealplanMealEditorElement, ev: RrkMealplanMealEditorCustomEvent<HTMLRrkMealplanMealEditorElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRrkMealplanMealEditorElement: {
        prototype: HTMLRrkMealplanMealEditorElement;
        new (): HTMLRrkMealplanMealEditorElement;
    };
    interface HTMLRrkMealplanMealListElementEventMap {
        "entry-clicked": string;
    }
    interface HTMLRrkMealplanMealListElement extends Components.RrkMealplanMealList, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRrkMealplanMealListElementEventMap>(type: K, listener: (this: HTMLRrkMealplanMealListElement, ev: RrkMealplanMealListCustomEvent<HTMLRrkMealplanMealListElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRrkMealplanMealListElementEventMap>(type: K, listener: (this: HTMLRrkMealplanMealListElement, ev: RrkMealplanMealListCustomEvent<HTMLRrkMealplanMealListElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRrkMealplanMealListElement: {
        prototype: HTMLRrkMealplanMealListElement;
        new (): HTMLRrkMealplanMealListElement;
    };
    interface HTMLElementTagNameMap {
        "rrk-mealplan-app": HTMLRrkMealplanAppElement;
        "rrk-mealplan-meal-editor": HTMLRrkMealplanMealEditorElement;
        "rrk-mealplan-meal-list": HTMLRrkMealplanMealListElement;
    }
}
declare namespace LocalJSX {
    interface RrkMealplanApp {
        "apiBase"?: string;
        "basePath"?: string;
        "counter"?: number;
    }
    interface RrkMealplanMealEditor {
        "ambulanceId"?: string;
        "apiBase"?: string;
        "entryId"?: string;
        "onEditor-closed"?: (event: RrkMealplanMealEditorCustomEvent<string>) => void;
    }
    interface RrkMealplanMealList {
        "apiBase"?: string;
        "onEntry-clicked"?: (event: RrkMealplanMealListCustomEvent<string>) => void;
    }
    interface IntrinsicElements {
        "rrk-mealplan-app": RrkMealplanApp;
        "rrk-mealplan-meal-editor": RrkMealplanMealEditor;
        "rrk-mealplan-meal-list": RrkMealplanMealList;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "rrk-mealplan-app": LocalJSX.RrkMealplanApp & JSXBase.HTMLAttributes<HTMLRrkMealplanAppElement>;
            "rrk-mealplan-meal-editor": LocalJSX.RrkMealplanMealEditor & JSXBase.HTMLAttributes<HTMLRrkMealplanMealEditorElement>;
            "rrk-mealplan-meal-list": LocalJSX.RrkMealplanMealList & JSXBase.HTMLAttributes<HTMLRrkMealplanMealListElement>;
        }
    }
}
